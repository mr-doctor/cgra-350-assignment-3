
bool contains(const std::string &original, std::string inside) {
	return original.find(inside) != std::string::npos;
}

cgra::Bone Application::parse_asf(const char *filename) {

	std::ifstream asf_file(filename);

	if (!asf_file.is_open()) {
		print("failed");
		std::cerr << "File not open\n";
		return cgra::Bone(false, -1, "", glm::vec3(0), 0.0f, glm::vec3(0));
	}

	std::vector<cgra::Bone> all_bones;

	/*for (std::string line; std::getline(asf_file, line);) {
		std::istringstream line_parser(line);

		if (line == ":bonedata") {
			continue;
		}
	}*/

	bool bone_parsing = false;
	int val = 0;
	std::string line;

	all_bones.emplace_back(true, 0, "root", glm::vec3(0), 0.0f, glm::vec3(0));

	while (asf_file) {
		std::getline(asf_file, line);

		bool skeleton_parsing = false;

		if (line == ":bonedata") {
			bone_parsing = true;
			std::getline(asf_file, line);
		} else if (line == ":hierarchy") {
			skeleton_parsing = true;
			bone_parsing = false;
		}

		if (bone_parsing) {

			std::getline(asf_file, line);

			int id = parse_id(line);
			std::getline(asf_file, line);

			std::string name = parse_name(line);
			std::getline(asf_file, line);

			glm::vec3 direction = parse_direction(line);
			std::getline(asf_file, line);

			float length = parse_length(line);
			std::getline(asf_file, line);

			glm::vec3 axes = parse_axes(line);
			std::getline(asf_file, line);

			if (contains(line, "end")) {
				cgra::Bone new_bone = cgra::Bone((id == 1), id, name, direction, length, axes);
				all_bones.push_back(new_bone);
				val++;
				continue;
			}

			std::array<bool, 3> dof = parse_dof(line);

			std::getline(asf_file, line);

			if (contains(line, "end")) {
				cgra::Bone new_bone = cgra::Bone((id == 1), id, name, direction, length, axes);
				new_bone.dof = dof;
				all_bones.push_back(new_bone);
				continue;
			}

			std::vector<glm::vec2> limits;
			std::istringstream iss(line);
			std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
			                                 std::istream_iterator<std::string>());

			std::string coord1 = results[1];
			std::string coord2 = results[2];

			coord1.erase(std::remove(coord1.begin(), coord1.end(), '('), coord1.end());
			coord2.erase(std::remove(coord2.begin(), coord2.end(), ')'), coord2.end());

			limits.emplace_back(std::atof(coord1.c_str()), std::atof(coord2.c_str()));

			std::getline(asf_file, line);

			while (!contains(line, "end")) {
				std::istringstream iss2(line);
				std::vector<std::string> results2((std::istream_iterator<std::string>(iss2)),
				                                  std::istream_iterator<std::string>());

				coord1 = results2[0];
				coord2 = results2[1];
				coord1.erase(std::remove(coord1.begin(), coord1.end(), '('), coord1.end());
				coord2.erase(std::remove(coord2.begin(), coord2.end(), ')'), coord2.end());

				limits.emplace_back(std::atof(coord1.c_str()), std::atof(coord2.c_str()));

				std::getline(asf_file, line);
			}

			if (contains(line, "end")) {
				cgra::Bone new_bone = cgra::Bone((id == 1), id, name, direction, length, axes);
				new_bone.dof = dof;
				all_bones.push_back(new_bone);
			}
		}

		if (skeleton_parsing) {
			std::getline(asf_file, line);

			while (true) {
				std::getline(asf_file, line);
				if (contains(line, "end")) {
					break;
				}

				std::istringstream iss(line);
				std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
				                                 std::istream_iterator<std::string>());

				int parent = get_bone(results[0], all_bones);

				for (unsigned int i = 1; i < results.size(); i++) {
					all_bones[parent].children.push_back(all_bones[get_bone(results[i], all_bones)]);
				}
			}
		}

	} // endwhile

	for (const auto &bone : all_bones) {
		print(bone);
	}

	return cgra::Bone(false, -1, "", glm::vec3(0), 0.0f, glm::vec3(0));

}

int Application::get_bone(const std::string &name, std::vector<cgra::Bone> bones) {
	for (unsigned int i = 0; i < bones.size(); i++) {
		if (bones[i].name == name) {
			return i;
		}
	}
	return -1;
}

int Application::parse_id(std::string line) {
	std::istringstream iss(line);
	std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
	                                 std::istream_iterator<std::string>());

	return std::stoi(results[results.size() - 1]);
}

std::string Application::parse_name(std::string line) {
	std::istringstream iss(line);
	std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
	                                 std::istream_iterator<std::string>());

	return results[results.size() - 1];
}

glm::vec3 Application::parse_direction(std::string line) {
	std::istringstream iss(line);
	std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
	                                 std::istream_iterator<std::string>());

	return glm::vec3(std::atof(results[1].c_str()), std::atof(results[2].c_str()), std::atof(results[3].c_str()));
}

glm::vec3 Application::parse_axes(std::string line) {
	std::istringstream iss(line);
	std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
	                                 std::istream_iterator<std::string>());
	return glm::vec3(std::atoi(results[1].c_str()), std::atoi(results[2].c_str()), std::atoi(results[3].c_str()));
}

float Application::parse_length(std::string line) {
	std::istringstream iss(line);
	std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
	                                 std::istream_iterator<std::string>());

	return static_cast<float>(std::atof(results[results.size() - 1].c_str()));
}

std::array<bool, 3> Application::parse_dof(std::string line) {
	std::istringstream iss(line);
	std::vector<std::string> results((std::istream_iterator<std::string>(iss)),
	                                 std::istream_iterator<std::string>());

	std::array<bool, 3> dof{};

	for (unsigned int i = 1; i < results.size(); i++) {
		if (results[i] == "rx") {
			dof[0] = true;
		} else if (results[i] == "ry") {
			dof[1] = true;
		} else if (results[i] == "rz") {
			dof[2] = true;
		}
	}

	return dof;
}